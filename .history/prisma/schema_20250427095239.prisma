generator client {
  provider = "prisma-client-js" // Prisma Client untuk mengakses database
}

datasource db {
  provider = "mongodb" // Menggunakan MongoDB sebagai database
  url      = env("DATABASE_URL") // URL database diambil dari environment variable
}
model Admin {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId // ID unik
  username String   @unique
  password String
  createdAt DateTime @default(now())
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId // ID unik
  email    String   @unique
  password String
  name     String
  carts    Cart[]
  orders   Order[]
  createdAt DateTime @default(now())
}

enum Category {
  OPAK
  BASTIK
  KACANG
}

enum Container {
  TOPLES
  BOX
}

model Product {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String
  price            Float
  stock            Int
  category         Category
  container        Container
  imageUrl         String?           
  carts            Cart[]
  orders           Order[]
  highlighted      HighlightedProduct?
  createdAt        DateTime           @default(now())
}

model HighlightedProduct {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @unique @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])
  priority    Int      @default(0) // Lower numbers appear first
  isActive    Boolean  @default(true)
  startDate   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID unik
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  container Container
  createdAt DateTime @default(now())
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID unik
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  container Container
  total     Float
  status    String   @default("pending") // Status pesanan
  createdAt DateTime @default(now())
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}